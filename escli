#!/usr/bin/env ruby

require 'yaml'
require 'elasticsearch'
require 'json'
require 'docopt'
require 'zlib'

class EScli

  attr_reader :options
  attr_reader :config

  ###
  # CORE: Initialize
  #
  def initialize
    read_config_file
    # get_env_settings
    parse_opts
    @es = Elasticsearch::Client.new host: @config[:server].to_s
  end

  ###
  # CORE: Log
  #
  def log message
  # def log message, level
    puts(Time.now.to_s + ': ' + message)
    # puts( Time.now.to_s + ': ' + message ) if level < self.config['level']
  end


  ###
  # CORE: Help & CLI options initialization
  #
  def parse_opts
    doc = <<DOCOPT
Usage:
  escli [-j] index list [<regex>]
  escli [-j] index delete <regex>
  escli [-j] index open <regex>
  escli [-j] index close <regex>
  escli [-j] index optimize <regex>
  escli [-j] index refresh <regex>
  escli [-j] index flush <regex>
  escli [-j] index dump <regex> [-g] [--scroll=<time>] [--docs=<docs>]
  escli [-j] index import <directory> [-g] [--index=<index>]
  escli [-j] index get-mapping <index>
  escli [-j] index put-mapping <index> <file>
  escli [-j] index get-settings <index>
  escli [-j] index put-settings <index> <file>
  escli [-j] index clear-cache [-d [<fields>]] [-c] [-i] [<index>]
  escli [-j] template list
  escli [-j] template get <name>
  escli [-j] template delete <name>
  escli [-j] template put <name> <file>
  escli [-j] cluster get-settings
  escli [-j] cluster put-settings <file>
  escli [-j] cluster nodes
  escli [-j] cluster routing <index>
  escli [-j] cluster reroute-shard <index> --shard=<shard> --from=<from> --to=<to>
  escli [-j] cluster reroute-node <node> --to=<to>
  escli [-j] cluster shutdown [<nodes>]
  escli [-j] cluster health
  escli (-h|--help)

Index Actions:
  list              Lists indices Can be filtered by regex.
  delete            Deletes index/indices by regex. Try regex first on listing!
  open              Opens closed index/indices by regex.
  close             Closes index/indices by regex.
  optimize          Optimizes index/indices by regex.
  refresh           Refreshes index/indices by regex.
  flush             Flushes index/indices by regex.
  dump              Exports mapping, settings and data from index/indices.
                    by regex into directory set in .escli.
  import            Imports dumps from directory with datafile into specified
                    index.
  get-mapping       Fetch mapping for index.
  put-mapping       Set new mapping for index from file. `-` is STDIN.
  get-settings      Fetch setting for index.
  put-settings      Set new settings for index from file. `-` is STDIN.
  clear-cache       Clear cache for index.

Template Actions:
  list              List templates.
  get               Fetch template by its name.
  put               Set template by name.

Cluster Actions:
  get-settings      Fetch cluster settings.
  put-settings      Set cluster parameters from file. `-` is STDIN.
  node              Lists cluster nodes.
  routing           Show shard routing for index.
  reroute-shard     Move index shard to another node.
  reroute-node      Move all shards of indexes mathing regex to another node.
  shutdown          Shutdown cluster/nodes!
  health            Display cluster health.

Options:
  -h --help         Show this.
  -j                Show output in JSON instead of YAML.
  -g                Dump/import to/from gzipped files.
  --scroll=<time>   Time to keep scroll_id in ElasticSearch [default: 30m].
  --docs=<docs>     Number of documents to dump in one chunk [default: 1000].
  --shard=<shard>   Shard id to reroute.
  --from=<node>     Node from which to move the shard.
  --to=<node>       Node to which to move the shard.
  --index=<index>   Name of destination index (if omitted, the source index
                    name is used) 

DOCOPT
    begin
      @options = Docopt.docopt(doc)
    rescue Docopt::Exit => e
      puts 'ElasticSearch CLI tool for human beings (i.e. sysadmins)'
      puts
      puts e.message
      exit
    end
  end

  ###
  # CORE: Get settings from environment variables
  #
  def get_env_settings
  end

  ###
  # CORE: Read .escli config file
  #
  def read_config_file
    @config = YAML::load(File.open('.escli'))
  end

  ###
  # CORE: Option logic
  #
  def process!
    if self.options['index']
      if self.options['list']
        self.options['<regex>'] ? self.index_list(self.options['<regex>']) : self.index_list
      elsif self.options['delete']
        self.index_delete self.options['<regex>']
      elsif self.options['open']
        self.index_open self.options['<regex>']
      elsif self.options['optimize']
        self.index_optimize self.options['<regex>']
      elsif self.options['close']
        self.index_close self.options['<regex>']
      elsif self.options['flush']
        self.index_flush self.options['<regex>']
      elsif self.options['refresh']
        self.index_refresh self.options['<regex>']
      elsif self.options['dump']
        self.index_dump self.options['<regex>']
      elsif self.options['import']
        self.index_import
      elsif self.options['get-mapping']
        self.index_get_mapping self.options['<index>']
      elsif self.options['put-mapping']
        self.index_put_mapping self.options['<index>']
      elsif self.options['get-settings']
        self.index_get_settings self.options['<index>']
      elsif self.options['put-settings']
        self.index_put_settings self.options['<index>']
      end
    elsif self.options['template']
      if self.options['put']
        self.template_put
      elsif self.options['get']
        self.template_get
      elsif self.options['delete']
        self.template_delete
      end
    elsif self.options['cluster']
      if self.options['health']
        self.cluster_health
      elsif self.options['get-settings']
        self.cluster_get_settings
      elsif self.options['nodes']
        self.cluster_nodes
      elsif self.options['routing']
        self.cluster_routing
      end
    elsif self.options['template']
      if self.options['list']
        self.template_list 
      end
    end
  end

  ###
  # CORE: Runner
  #
  def run!
    if self.options['-j']
      puts JSON.pretty_generate self.process!
    else
      puts self.process!.to_yaml
    end
  end

##############################################################################
### APP METHODS ##############################################################
##############################################################################

  ###
  # INDEX: List
  #
  def index_list (filter = ".*")
    log "Fetching blocks."
    es_blocks = @es.cluster.state({
      filter_index_templates: true,
      filter_metadata: true, 
      filter_nodes: true,
      filter_routing_table: true,
    })['blocks']['indices']
    es_blocks ||= {}
    log "Fetching indices."
    es_indices = @es.indices.status['indices']

    closed_indices = Hash.new
    es_blocks.each_key do |index|
      closed_indices[index] = { state: es_blocks[index].shift[1]['description'] }
    end

    available_indices = Hash.new
    es_indices.each_key do |index|
      available_indices[index] = { state: "index available" }
    end

    indices = Hash.new
    indices.merge! closed_indices
    indices.merge! available_indices
    indices = indices.delete_if {|index, data| not Regexp.new(filter).match(index)}

    { indices: indices.count, items: Hash[indices.sort] }
  end

  ###
  # INDEX: Open
  #
  def index_open (filter = ".*")
    opened = 0
    items = self.index_list(filter)[:items].keys
    items.each do |index|
      log "Opening index #{index}."
      @es.indices.open({ ignore_unavailable: false, index: index })
      opened += 1
      log "Index #{index} opened."
    end
    { opened: opened , indices: items }
  end


  ###
  # INDEX: Delete
  #
  def index_delete (filter = ".*")
    deleted = 0
    items = self.index_list(filter)[:items].keys
    items.each do |index|
      log "Deleting index #{index}."
      @es.indices.delete index: index
      deleted += 1
      log "Index #{index} deleted."
    end
    { deleted: deleted , indices: items }
  end

  ###
  # INDEX: Close
  #
  def index_close (filter = ".*")
    closed = 0
    items = self.index_list(filter)[:items].keys
    items.each do |index|
      log "#{index}: closing index."
      @es.indices.close ignore_unavailable: false, index: index
      closed += 1
      log "#{index}: index closed."
    end
    { closed: closed , indices: items }
  end

  ###
  # INDEX: Optimize
  #
  def index_optimize (filter = ".*")
    optimized = 0
    items = self.index_list(filter)[:items].keys
    items.each do |index|
      log "#{index}: closing index."
      @es.indices.optimize index: index
      optimized += 1
      log "#{index}: index optimized."
    end
    { optimized: optimized , indices: items }
  end

  ###
  # INDEX: Dump
  #
  def index_dump (filter = ".*")
    dump_dir = self.config[:dump_directory] || '/tmp/escli_dump'
    dumped_index_count = 0
    dumped_docs_count = 0

    items = self.index_list(filter)[:items].keys
    items.each do |index|
      log "#{index}: dumping index"
      Dir.exists?(dump_dir + '/' + index) || Dir.mkdir(dump_dir + '/' + index)

      log "#{index}: dumping index mapping"
      fd_mapping = File.open [dump_dir,index,'mapping.json'].join('/'), 'w'
      fd_mapping << JSON.pretty_generate(self.index_get_mapping(index)[index])
      fd_mapping.close
      log "#{index}: index mapping dumped"

      log "#{index}: dumping index settings"
      fd_settings = File.open [dump_dir,index,'settings.json'].join('/'), 'w'
      index_settings = self.index_get_settings(index)[index]
      fd_settings << JSON.pretty_generate(index_settings)
      fd_settings.close
      log "#{index}: index settings dumped"

      log "#{index}: preparing scroll search"
      size = self.options['--docs'].to_i/index_settings['settings']['index.number_of_shards'].to_i
      result = @es.search({ index: index, scroll: self.options['--scroll'], search_type: 'scan', size: size })
      chunks = result['hits']['total']/self.options['--docs'].to_i+1
      log "#{index}: dumping #{result['hits']['total']} documents in #{chunks} chunks"
      scroll_id = result['_scroll_id']
      orig_scroll_id = result['_scroll_id']
      chunk = 1
      log "#{index}: dumping chunk #{chunk}/#{chunks}"
      while data = @es.scroll({ scroll: self.options['--scroll'], scroll_id: scroll_id})
        break if ( data['_scroll_id'] == scroll_id ) && ( data['_scroll_id'] != orig_scroll_id )
        log "#{index}: dumping chunk #{chunk}/#{chunks}" if chunk != 1
        scroll_id = data['_scroll_id']
        if self.options['-g']
          fd_index = Zlib::GzipWriter.open("#{dump_dir}/#{index}/data." + sprintf('%07d', chunk) + ".json.gz")
        else
          fd_index = File.open("#{dump_dir}/#{index}/data." + sprintf('%07d', chunk) + ".json", 'w')
        end
        docs = data['hits']['hits']
        fd_index << JSON::pretty_generate(docs)
        fd_index.close
        chunk += 1
      end
      dumped_index_count += 1
      dumped_docs_count += result['hits']['total']
      log "#{index}: #{dumped_docs_count} documents dumped"
      log "#{index}: index dumped"
    end
    { dumped_indices: dumped_index_count, dumped_docs: dumped_docs_count, indices: items }
  end

  ###
  # INDEX: Import
  #
  def index_import
    ( log "Dump data directory doesn\'t exist"; return ) if not Dir.exists?(self.options['<directory>'])
    suffix = self.options['-g'] ? '.json.gz' : '.json'
    files = Dir[self.options['<directory>'] + '/data*' + suffix].sort
    log "Importing files: #{files.to_s}"
    files.each do |file|
      bulk = Array.new
      fd_index = self.options['-g'] ? Zlib::GzipReader.open(file) : File.open(file, 'r')
      log "Reading #{file}"
      JSON.load(fd_index.read).each do |doc|
        bulk << { index: {
          _index: self.options['--index'] || doc['_index'],
          _type: doc['_type'],
          _id: doc['_id'],
          data: doc['_source'] }
        }
      end
      log "Importing #{bulk.count} docs."
      @es.bulk body: bulk
      log "Imported #{file}"
    end

  end

  ###
  # INDEX: Get Mapping
  #
  def index_get_mapping index
    @es.indices.get_mapping index: index
  end

  ###
  # INDEX: Put Mapping
  #
  def index_put_mapping index
    # @es.indices.put_mapping
  end

  ###
  # INDEX: Get Settings
  #
  def index_get_settings index
    @es.indices.get_settings index: index
  end

  ###
  # INDEX: Put Settings
  #
  def indes_put_settings index
    # @es.indices.put_settings
  end

  ###
  # TEMPLATE: List
  #
  def template_list
    @es.cluster.state({
      filter_blocks: true,
      filter_index_templates: false,
      filter_metadata: true,
      filter_nodes: true,
      filter_routing_table: true
    })
  end

  ###
  # TEMPLATE: Get
  #
  def template_get
    log "Getting template #{self.options['<name>']}"
    @es.indices.get_template name: self.options['<name>']
  end

  ###
  # TEMPLATE: Delete
  #
  def template_delete
    log "Deleting template #{self.options['<name>']}"
    @es.indices.delete_template name: self.options['<name>']
  end

  ###
  # TEMPLATE: Put
  #
  def template_put
    log "Opening #{self.options['<file>']}"
    file = self.options['<file>'] == '-' ? $stdin.read : IO.read(self.options['<file>'])
    log "Parsing file"
    data = YAML::load(file) || JSON.parse(file)
    log "Putting template #{self.options['<name>']}"
    @es.indices.put_template name: self.options['<name>'], body: data
  end

  ###
  # CLUSTER: Nodes
  #
  def cluster_nodes
    log "Fetching node list"
    @es.cluster.state({
      filter_metadata: true,
      filter_indices: true,
      filter_routing_table: true,
      filter_index_templates:true,
      filter_blocks: true
    })['nodes'].delete_if { |id, info| info['attributes']['client'] == 'true' }
  end

  ###
  # CLUSTER: Rounting
  #
  def cluster_routing
    ret = Hash.new
    nodes = self.cluster_nodes
    log "Fetching shard routing"
    shards = @es.cluster.state({ 
      filter_metadata: true,
      filter_indices: true,
      filter_nodes: true,
      filter_index_templates:true,
      filter_blocks: true
    })['routing_table']['indices'][self.options['<index>']]['shards']
    nodes.each do |id, node|
      ret[node['name']] = { 'primary' => Array.new, 'secondary' => Array.new, 'other' => Array.new }
      shards.each do |shard, replicas|
        replicas.each do |replica| 
          ret[node['name']]['primary'] << 
            { shard => 
              replica.delete_if { |key| key =~ /^(node|shard|primary|index)$/ } } if replica['node'] == id && replica['primary'] == true
          ret[node['name']]['secondary'] <<
            { shard => 
              replica.delete_if { |key| key =~ /^(node|shard|primary|index)$/ } } if replica['node'] == id && replica['primary'] == false
          ret[node['name']]['other'] <<
            { shard => 
              replica.delete_if { |key| key =~ /^(node|shard|primary|index)$/ } } if ( replica['node'] != id && replica['state'] != 'STARTED' ) || replica['node'] == '' 
        end
      end
    end
    Hash[ret.sort]
  end

  ###
  # CLUSTER: Health
  #
  def cluster_health
    @es.cluster.health
  end

  ###
  # CLUSTER: Status
  #
  def cluster_status
    @es.cluster.status
  end
  
  ###
  # CLUSTER: get_settings
  #
  def cluster_get_settings
    @es.cluster.get_settings
  end
  
  ###
  # CLUSTER: put_settings
  #
  def cluster_put_settings
    # @es.cluster.put_settings
  end

end

##############################################################################
### MAIN #####################################################################
##############################################################################

escli = EScli.new
escli.run!
